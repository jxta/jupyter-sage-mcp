#!/bin/bash

# Jupyter MCP Server - PostBuild Script for mybinder.org
set -euo pipefail

echo "🪐 ✨ Setting up Jupyter SageMath MCP Server environment..."

# Install MCP server in development mode
echo "Installing Jupyter MCP Server..."
pip install -e .

# Install Python kernel (always available)
echo "Installing Python kernel..."
python -m ipykernel install --user --name python3 --display-name "Python 3"

# Check if SageMath is available and install kernel
if command -v sage >/dev/null 2>&1; then
    echo "✅ SageMath is available"
    
    # Verify SageMath installation
    echo "Verifying SageMath installation..."
    sage -c "print('SageMath version:', version())" || {
        echo "⚠️ SageMath verification failed"
    }
    
    # Install SageMath kernel
    echo "Installing SageMath kernel..."
    sage -pip install ipykernel || echo "⚠️ Failed to install ipykernel in SageMath"
    sage -python -m ipykernel install --user --name sagemath --display-name "SageMath" || {
        echo "⚠️ Failed to install SageMath kernel, continuing without it..."
    }
    
    # Install additional Sage packages if needed
    echo "Installing additional SageMath packages..."
    sage -pip install notebook || echo "⚠️ Failed to install notebook in SageMath"
    
    SAGEMATH_AVAILABLE=true
else
    echo "⚠️ SageMath is not available, continuing with Python-only setup"
    SAGEMATH_AVAILABLE=false
fi

# Install Julia kernel if Julia is available
if command -v julia >/dev/null 2>&1; then
    echo "Installing Julia kernel..."
    julia -e 'using Pkg; Pkg.add("IJulia"); using IJulia; installkernel("Julia")' || {
        echo "⚠️ Failed to install Julia kernel"
    }
fi

# Verify kernel installations
echo "Listing installed kernels..."
jupyter kernelspec list

# Create necessary directories
echo "Creating directories..."
mkdir -p notebooks
mkdir -p exports
mkdir -p logs
mkdir -p templates

# Set up Jupyter extensions (build without dev mode for stability)
echo "Setting up Jupyter extensions..."
jupyter lab build --dev-build=False --minimize=True || {
    echo "⚠️ Jupyter Lab build failed, continuing..."
}

# Test MCP server import
echo "Testing MCP server import..."
python -c "from src.jupyter_mcp_server import JupyterMCPServer; print('✅ MCP Server import successful')" || {
    echo "⚠️ MCP Server import failed"
    # Don't exit here, let it continue for debugging
}

# Test functionality based on available components
if [ "$SAGEMATH_AVAILABLE" = true ]; then
    echo "Testing SageMath functionality..."
    sage -c "print('✅ SageMath test: 2+2 =', 2+2); print('✅ Factor test: factor(12) =', factor(12))" || {
        echo "⚠️ SageMath test failed"
    }
fi

# Test Python functionality
echo "Testing Python functionality..."
python -c "import numpy, matplotlib, sympy; print('✅ Python scientific stack available')"

# Create a simple test notebook
echo "Creating test notebook..."
cat > notebooks/test_mcp.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Jupyter MCP Server Test\n",
    "\n",
    "This notebook tests the basic functionality of the Jupyter MCP Server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Test Python functionality\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import sympy as sp\n",
    "\n",
    "print(\"✅ Python libraries imported successfully\")\n",
    "print(f\"NumPy version: {np.__version__}\")\n",
    "print(f\"SymPy version: {sp.__version__}\")"
   ],
   "outputs": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Test symbolic computation\n",
    "x = sp.Symbol('x')\n",
    "expr = x**2 + 2*x + 1\n",
    "factored = sp.factor(expr)\n",
    "print(f\"Expression: {expr}\")\n",
    "print(f\"Factored: {factored}\")"
   ],
   "outputs": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

# Set permissions
chmod +x start || echo "start file not found"

echo "🎉 Setup completed successfully!"
echo "Available kernels:"
jupyter kernelspec list

if [ "$SAGEMATH_AVAILABLE" = true ]; then
    echo "✅ SageMath is ready for mathematical computations"
else
    echo "⚠️ SageMath is not available, but Python with scientific libraries is ready"
fi

echo "📚 MCP Server is ready for use with Claude Desktop"
echo "🌐 Test notebook created at notebooks/test_mcp.ipynb"
